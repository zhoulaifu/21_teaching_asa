* Exercise 1. [Concept of Boundary Inputs]
- List two  boundary inputs for the following C program
#+BEGIN_SRC c
void FOO (double x){
a = x * x;
b = a * a
if (a < b) ...;
}
#+END_SRC

# Looking for x s.t. a=b
# x^2 - x^4=0  <=> x^2 (x^2-1)=0 <=> x =0 or x = 1 or x= -1 
- List two boundary inputs for the Python program
  FOO below, in which the input "x" is a 64-bit floating-point number.
#+BEGIN_SRC python
 def FOO(x):
    if x < 1.0:
        y= x + 1
        if y>=2: raise Exception ("UNEXPECTED! Input %.17f" %x)
#+END_SRC python

# x = 0.9999..
* Exercise 2. [Local Optimization]
Define the function f(x) as (x-1)**2 * (x-2)**2, where "x" is a double
number, "**" refers to the power operator.

- What is the minimum of f? And, where on the x-axis does f reach its minimum? To get the
intuition, one may observe a the graph of f using Google, by
copying the expression to the search engine.

-  Please  provide a proof on f's minimum. 
   
-  Experiment with Python's scipy.optimize.minimize
   function to find the minimum of f automatically.  The interface of
   the Python function can be found at
   https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html
   You probably need to install scipy. And, for your coding, you will
   need to provide an "initial guess" for the function's input.

# def f(x): return (x-1)**2 * (x-2)**2
# from scipy.optimize import minimize
# minimize (f,0) and them minimize(f,4)


* Exercise 3. [Global Optimization]
Consider an artificial function g(x)= ((x - 1) ** 2 -4) ** 2 + f(x)
where f(x) is defined to be (x - 1.5) ** 2 if x > 1.5 or 0
otherwise.

Find the function's global minimum with Python's
scipy.optimize.basinhopping method. Its usage can be found at
https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.basinhopping.html
Your calculated minimum should be close to -1. If it is not the case,
try to augment your iteration numbers (which is the "niter" parameter
of scipy.optimize.basinhopping).

To visualize the function, its graph is shown below: 
[[./fig/exampleFunction_globalMinimum.png]]


#
#
# def g(x): return ((x - 1) ** 2 -4) ** 2 + f(x)
# def f(x): return (x - 1.5) ** 2 if x > 1.5 else 0
# from scipy.optimize import basinhopping
# for example: basinhopping(g,1,niter=100,stepsize=10)

* Exercise 4. [Limitation of Local/Global Optimization]

Consider a characteristic function f(x) = 0 if x == 100, else 1. What
is the minimum of the function?
- First, do this manually.
- Then, try to get an answer using scipy.optimize.minimize (the local
  optimization tool), or scipy.optimize.basinhopping (the global
  optimization tool).  You may use different starting points, e.g. 0, 10, 100, 1000.



* Exercise 5. [Finding bugs with Boundary Value Analysis]
In this exercise, we will automatically uncover a bug through testing
 boundary values. The bug is coded as the raised exception shown in
 the code below.

#+BEGIN_SRC python
def FOO(x):
    if x < 1.0:
        y= x + 1
        if y>=2: raise Exception ("UNEXPECTED! Input %.17f" %x)
#+END_SRC python

If we reason with traditional math, the program should never trigger the
exception.  However, if we set the input to a number close to but strictly smaller than 1, that is 0.999 999 999 999 999 9,
the branch “if (x < 1)” will be taken, but after "y = x + 1", the
subsequent “if (y >= 2)” will also be taken, which can be unexpected.


The aim of this exercise is to automatically uncover such boundary
inputs. Take the following step to achieve this:

- First, transform the program FOO to another program, denoted by R,
   in which you insert r = r * (x - 1) ** 2 and r = r * (y-2) ** 2
   before the two branches, and return the value of r in the end.
- Then, retrieve the value of "r" through the following code
#+BEGIN_SRC python
def R(x):
    r=FOO_I(x)
    return r
#+END_SRC python
- Minimize R with scipy.optimize.basinhopping. Probably you will need
   to provide an iteration number larger than the default one
   (the default iteration number of scipy.opitimize.basinhopping is
   niter=100 as shown in
   https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.basinhopping.html)
   During the minimization procedure, you should see the exception raised. Hint: Consider using the following code for global optimization:


#+BEGIN_SRC python
   def mcmc(func,  niter=50, start_point=0, method='powell'):
    tol=1e-16
    def callback_global(x,f,accepted):
        conclusion= 'good!' if f<tol else "not good enough"
        print("MCMC Sampling:: At x=%.10f,  f=%g,  ==> %s" % (x,f,  conclusion))

    op.basinhopping(func,start_point,callback=callback_global,minimizer_kwargs={'method':'powell'},niter=niter)
#+END_SRC     



* Exercise 6. [General Algorithm]
Assume that a C function FOO has the interface
a
#+BEGIN_SRC C
void FOO(double x)
#+END_SRC C
The body of the C code includes a set of 10 branches of the form
#+BEGIN_SRC C
if (a_i op_i b_i)
#+END_SRC C
with i ranging from 1 to 10, and op_i being one of {<, <=, ==, !=, >=, >}.

- What is a boundary input of the function FOO?
- Write psuedo-code for automatically building a function R so that one can find FOO's boundary input through minimizing R.

# inject r = 1 in the beginning of FOO  
# for each "a op b" in FOO
#    inject r = r * (a-b)**2 in
# return y -> return r,y. IF no "return y" -> return r,
# def R(x): r,a =FOO_I(x); return r



