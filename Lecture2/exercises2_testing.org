* Mini-Project 1: Testing Robot Operating System (ROS) with compiler sanitizers 

Suppose that you are working with ROS-Consortium (https://rosindustrial.org/ric-eu). You are asked to assure quality of the legacy code of ROS2 library geometry2 (https://github.com/ros2/geometry2) that is of utmost importance for them.  What can you do?


  
- For this miniproject, you consider the ROS environment for the legacy code being the ROS foxy distribution.   Install ROS foxy distro  on your (Virtual) OS.   Use the provided Dockerfile in resource/  would be easier than installing ROS from scratch (https://docs.ros.org/en/foxy/Installation.html). After installation, "ros2 --help" should work, and the command "tree /opt -L 2" produces

#+begin_src text    
/opt
├── ros
│   └── foxy
└── ros_ws
    └── src
#+end_src


-  Get the source code for geometry2. Following ROS directory requirement, put code to /opt/ros2_ws/src.

  + Hint: Clone the ros2:foxy branch of geometry2.
    
  
- Perhaps the first quality assurance step is to compile the package.

  Hint: https://docs.ros.org/en/foxy/Tutorials/Colcon-Tutorial.html. After building, you will get something like "Summary: 14 packages finished [1min 6s]". 

- The second thing to do should be unit test.

  + Hint: Same info link above. 

- Perhaps no bugs are found so far. Continue testing with sanitizers.

  + Hint: First, recompile and then "colcon test".  You may get something like  "3 packages had test failures: test_tf2 tf2_py tf2_ros". I used the command below to recompile geometry2.

#+BEGIN_SRC shell 
VERBOSE=1  CXXFLAGS="-fsanitize=address,undefined -fsanitize-undefined-trap-on-error" colcon build --event-handlers console_direct+
#+END_SRC

 

- Hunt down the bug. Try to come up with a table like this in the end, which would provide essential info for developers to reproduce the errors.

  | ROS packages (that are buggy) | Binary (to reproduce the bug) | Sanitizers (used to trap the bug) |
  |-------------------------------+-------------------------------+-----------------------------------|
  | ...                           | ...                           | ...                               |

  + Hint: binaries of specific package is in the /opt/ros_ws/build folder

  + Hint: I got something like this

  | ROS-package | Binary                       | Sanitizer        |
  |-------------+------------------------------+------------------|
  | tf2_ros     | tf2_ros/tf2_monitor          | AddressSanitizer |
  | test_tf2    | test_tf2/test_message_filter | AddressSanitizer |
  |             |                              |                  |



* Mini-project 2:  Fuzzing the GNU Scientific Library  (GSL)

Warning: Reseach-y contents ahead! 
  
You now want to know check reliability of the open-source GSL. It is an important problem  as GSL is widely used, even in safety-critical sectors like CERN.  You will use Google's AFL to fuzz GSL.


- Set up a Linux-like environment that has gcc, flex, make installed. 

  + Hint: Use Resources/Lecture2/MiniProject2/Dockerfile. 


- Get source GSL 2.5 source code. 

- Get list of files that has decimal  floating-point numbers (such as 3.14) and a main program. Double check if gsl-2.5/doc/examples/statsort.c in one of the files you found.

  + Hint: You can use this regular expression to get FP decimals: "[0-9]*\.[0-9]+".  You will get about 106 Results in total, and 63 from doc/examples. 
  + Hint: You can check the results with "python3 find.py --path gsl-2.5/"

- Now, take a look at gsl-2.5/doc/examples/statsort.c: Does it have main? Does it iteract with GSL? Does it take input from stdin? In other words, can this program be readily used for AFL fuzzing?

- Manually transform statsort.c so that it becomes a fuzz driver. Also, put in a separate file the seed obtained in this process. The seed should be the floating-point literals you parameterized. 

  + Hint: You can use "scanf" to get inputs from stdin.
  + Hint:  Check your result with a fuzz driver transformer "main_tool" written from a lexer. First compile the lexer: "cd shaping && make main_tool". Then do the transformation work:  "LANG_LEX=c ../shaping/main_tool < ../gsl-2.5/doc/examples/stat.c > stat_shape.c", where "main_tool" has to be compiled first.  By doing so, main_tool also produces shape_parameters.txt that includes the original FP literals. The first line in shape_parameters.txt can be irrelevant as it is accounts the number of lines in the file. 

- Fuzz with the newly transformed code, say statsort_shape.c. Interpret your findings.

  + Hint: You will need to compile GSL with "make CC=afl-gcc", and perhaps install it with "make install". 
  + Hint: You will compilie and link statsort.c with generated GSL libraries https://www.gnu.org/software/gsl/doc/html/usage.html.

  + Hint: In the end, AFL should find more than one way to make GSL fail. See https://savannah.gnu.org/bugs/index.php#comment0 for a security-related buffer overflow reported in this way. See the picture below to  get  an idea of the timestamp of the bugs I found. 

[[./fig/statsort_bug_timestamp.png]]     
